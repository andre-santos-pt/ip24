{
  "title" : "Funções Dependentes",
  "description" : "<div>\n  <p>O objectivo deste módulo é dominar a invocação de funções e a decomposição\nfuncional de um problema.\n\nSerá também praticada a utilização de números aleatórios.</p>\n</div>\n",
  "links" : [ ],
  "exercises" : [ {
    "id" : "oddIsNotEven",
    "type" : "JCLASS",
    "description" : "<div>Escreva a função <code>isOdd</code> recorrendo à função <code>isEven</code> dada.</div>\n",
    "required" : true,
    "startCode" : "class EvenOdd {\n    static boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n\n}",
    "solutions" : [ "class EvenOdd {\n    static boolean isEven(int n) {\n        return n % 2 == 0;\n    }\n    static boolean isOdd(int n) {\n        return !isEven(n);\n    }\n}" ],
    "freezeTop" : 4,
    "freezeBottom" : 1,
    "exclude" : [ "EQUAL", "DIFFERENT" ],
    "include" : [ ],
    "importCode" : null,
    "importExercise" : null,
    "tests" : [ {
      "name" : "isOdd",
      "args" : [ 7 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "traceVars" : [ ]
    }, {
      "name" : "isOdd",
      "args" : [ 10 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "traceVars" : [ ]
    }, {
      "name" : "isOdd",
      "args" : [ 13 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "traceVars" : [ ]
    } ]
  }, {
    "id" : "randomInts",
    "type" : "JCLASS",
    "description" : "<div>...</div>\n",
    "required" : true,
    "startCode" : "class RandomInts {\n    static int random() {\n        return (int) (Math.random() * 1000000);\n    }\n\n}",
    "solutions" : [ "class RandomInts {\n    static int random() {\n        return (int) (Math.random() * 1000000);\n    }\n\n    static int randomUntil(int max) {\n        return (int) (Math.random() * max);\n    }\n\n    static int randomWithin(int min, int max) {\n        return min + randomUntil(max - min + 1);\n    }\n}" ],
    "freezeTop" : 4,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercise" : null,
    "tests" : [ {
      "name" : "randomUntil",
      "args" : [ 5 ],
      "expected" : {
        "type" : "rangecheck",
        "min" : 0,
        "max" : 4
      },
      "traceVars" : [ ]
    }, {
      "name" : "randomUntil",
      "args" : [ 5 ],
      "expected" : {
        "type" : "rangecheck",
        "min" : 0,
        "max" : 4
      },
      "traceVars" : [ ]
    }, {
      "name" : "randomUntil",
      "args" : [ 5 ],
      "expected" : {
        "type" : "rangecheck",
        "min" : 0,
        "max" : 4
      },
      "traceVars" : [ ]
    }, {
      "name" : "randomUntil",
      "args" : [ 5 ],
      "expected" : {
        "type" : "rangecheck",
        "min" : 0,
        "max" : 4
      },
      "traceVars" : [ ]
    }, {
      "name" : "randomUntil",
      "args" : [ 5 ],
      "expected" : {
        "type" : "rangecheck",
        "min" : 0,
        "max" : 4
      },
      "traceVars" : [ ]
    }, {
      "name" : "randomWithin",
      "args" : [ 5, 10 ],
      "expected" : {
        "type" : "rangecheck",
        "min" : 5,
        "max" : 10
      },
      "traceVars" : [ ]
    }, {
      "name" : "randomWithin",
      "args" : [ 5, 10 ],
      "expected" : {
        "type" : "rangecheck",
        "min" : 5,
        "max" : 10
      },
      "traceVars" : [ ]
    }, {
      "name" : "randomWithin",
      "args" : [ 5, 10 ],
      "expected" : {
        "type" : "rangecheck",
        "min" : 5,
        "max" : 10
      },
      "traceVars" : [ ]
    }, {
      "name" : "randomWithin",
      "args" : [ 5, 10 ],
      "expected" : {
        "type" : "rangecheck",
        "min" : 5,
        "max" : 10
      },
      "traceVars" : [ ]
    }, {
      "name" : "randomWithin",
      "args" : [ 5, 10 ],
      "expected" : {
        "type" : "rangecheck",
        "min" : 5,
        "max" : 10
      },
      "traceVars" : [ ]
    } ]
  }, {
    "id" : "divisorsModule",
    "type" : "JCLASS",
    "description" : "<div>Escreva um módulo com três funções relacionadas com divisores:<br><code>countDivisors</code>: conta quantos divisores tem um número inteiro;<br><code>sumProperDivisors</code>: soma os divisores <em>próprios</em> de um número inteiro (exclui o próprio);<br><code>isPrime</code>: verifica se um número é primo.</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li>countDivisors(8) &rarr; 4   (1, 2, 4, 8)</li>\n    <li>sumProperDivisors(6) &rarr; 6   (1, 2, 3)</li>\n    <li>isPrime(7) &rarr; false</li>\n  </ul>\n</div>\n",
    "required" : true,
    "startCode" : "class Divisors {\n\n}",
    "solutions" : [ "class Divisors {\n    static int countDivisors(int n) {\n        int d = 1;\n        int i = 1;\n        while(i <= n / 2) {\n            if(n % i == 0) {\n                d = d + 1;\n            }\n            i = i + 1;\n        }\n        return d;\n    }\n    static int sumProperDivisors(int n) {\n        int s = 0;\n        int i = 1;\n        while(i < n) {\n            if(n % i == 0) {\n                s = s + i;\n            }\n            i = i + 1;\n        }\n        return s;\n    }\n    static boolean isPrime(int n) {\n        if(n == 1) {\n            return false;\n        }\n        int i = 2;\n        while(i <= n / 2) {\n            if(n % i == 0) {\n                return false;\n            }\n            i = i + 1;\n        }\n        return true;\n    }\n}" ],
    "freezeTop" : 1,
    "freezeBottom" : 1,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercise" : null,
    "tests" : [ {
      "name" : "countDivisors",
      "args" : [ 1 ],
      "expected" : {
        "type" : "result",
        "value" : 1
      },
      "traceVars" : [ ]
    }, {
      "name" : "countDivisors",
      "args" : [ 7 ],
      "expected" : {
        "type" : "result",
        "value" : 2
      },
      "traceVars" : [ ]
    }, {
      "name" : "countDivisors",
      "args" : [ 12 ],
      "expected" : {
        "type" : "result",
        "value" : 6
      },
      "traceVars" : [ ]
    }, {
      "name" : "sumProperDivisors",
      "args" : [ 8 ],
      "expected" : {
        "type" : "result",
        "value" : 7
      },
      "traceVars" : [ ]
    }, {
      "name" : "sumProperDivisors",
      "args" : [ 12 ],
      "expected" : {
        "type" : "result",
        "value" : 16
      },
      "traceVars" : [ ]
    }, {
      "name" : "isPrime",
      "args" : [ 8 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "traceVars" : [ ]
    }, {
      "name" : "isPrime",
      "args" : [ 13 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "traceVars" : [ ]
    }, {
      "name" : "isPrime",
      "args" : [ 21 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "traceVars" : [ ]
    } ]
  }, {
    "id" : "perfectNumbers",
    "type" : "JCLASS",
    "description" : "<div>Escreva um módulo com duas funções relacionadas com números perfeitos.\nUm número perfeito é aquele cuja soma dos divisores próprios é igual ao\npróprio número. Por exemplo, 6 é perfeito porque (1 + 2 + 3) é igual a 6.<br><code>isPerfect</code>: verifica se um número é perfeito;<br><code>countPerfectNumbers</code>: conta quantos números perfeitos existem até um limite máximo.</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li>isPerfect(6) &rarr; true</li>\n    <li>countPerfectNumbers(30) &rarr; 2</li>\n  </ul>\n</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "class PerfectNumbers {\n    static boolean isPerfect(int n) {\n        return Divisors.sumProperDivisors(n) == n;\n    }\n    static int countPerfectNumbers(int max) {\n        int c = 0;\n        int i = 1;\n        while(i <= max) {\n            if(isPerfect(i)) {\n                c = c + 1;\n            }\n            i = i + 1;\n        }\n        return c;\n    }\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercise" : {
      "module" : null,
      "exercise" : "divisorsModule"
    },
    "tests" : [ {
      "name" : "isPerfect",
      "args" : [ 28 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "traceVars" : [ ]
    }, {
      "name" : "isPerfect",
      "args" : [ 12 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "traceVars" : [ ]
    }, {
      "name" : "isPerfect",
      "args" : [ 8 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "traceVars" : [ ]
    }, {
      "name" : "countPerfectNumbers",
      "args" : [ 30 ],
      "expected" : {
        "type" : "result",
        "value" : 2
      },
      "traceVars" : [ ]
    }, {
      "name" : "countPerfectNumbers",
      "args" : [ 8 ],
      "expected" : {
        "type" : "result",
        "value" : 1
      },
      "traceVars" : [ ]
    }, {
      "name" : "countPerfectNumbers",
      "args" : [ 500 ],
      "expected" : {
        "type" : "result",
        "value" : 3
      },
      "traceVars" : [ ]
    } ]
  }, {
    "id" : "primeNumbers",
    "type" : "JCLASS",
    "description" : "<div>Escreva um módulo com duas funções relacionadas com números primos:<br><code>countPrimes</code>: conta quantos números primos existem até um determinado número natural (inclusivé);<br><code>existsPrimeBetween</code>: verifica se existe algum primo entre dois números naturais (intervalo aberto).</div>\n<div><em>Exemplos:</em>\n  <ul>\n    <li>countPrimes(7) &rarr; 4</li>\n    <li>existsPrimeBetween(5, 9) &rarr; true</li>\n  </ul>\n</div>\n",
    "required" : true,
    "startCode" : null,
    "solutions" : [ "class Primes {\n    static int countPrimes(int max) {\n        int i = 1;\n        int c = 0;\n        while(i <= max) {\n            if(Divisors.isPrime(i)) {\n                c = c + 1;\n            }\n            i = i + 1;\n        }\n        return c;\n    }\n    static boolean existsPrimeBetween(int min, int max) {\n        int i = min + 1;\n        while(i < max) {\n            if(Divisors.isPrime(i)) {\n                return true;\n            }\n            i = i + 1;\n        }\n        return false;\n    }\n}" ],
    "freezeTop" : 0,
    "freezeBottom" : 0,
    "exclude" : [ ],
    "include" : [ ],
    "importCode" : null,
    "importExercise" : {
      "module" : null,
      "exercise" : "divisorsModule"
    },
    "tests" : [ {
      "name" : "countPrimes",
      "args" : [ 7 ],
      "expected" : {
        "type" : "result",
        "value" : 4
      },
      "traceVars" : [ ]
    }, {
      "name" : "countPrimes",
      "args" : [ 15 ],
      "expected" : {
        "type" : "result",
        "value" : 6
      },
      "traceVars" : [ ]
    }, {
      "name" : "countPrimes",
      "args" : [ 21 ],
      "expected" : {
        "type" : "result",
        "value" : 8
      },
      "traceVars" : [ ]
    }, {
      "name" : "existsPrimeBetween",
      "args" : [ 5, 9 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "traceVars" : [ ]
    }, {
      "name" : "existsPrimeBetween",
      "args" : [ 31, 37 ],
      "expected" : {
        "type" : "result",
        "value" : false
      },
      "traceVars" : [ ]
    }, {
      "name" : "existsPrimeBetween",
      "args" : [ 12, 15 ],
      "expected" : {
        "type" : "result",
        "value" : true
      },
      "traceVars" : [ ]
    } ]
  } ]
}
